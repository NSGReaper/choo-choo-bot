service: choo-choo-bot

frameworkVersion: '3'

provider:
  name: aws
  profile: serverless
  runtime: nodejs16.x
  httpApi:
    id: 0d0q81e9ea #discordIntegration
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - PlayerTable
              - Arn
        - Effect: "Allow"
          Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - GameTable
              - Arn
        - Effect: "Allow"
          Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - DistributedLocksStore
              - Arn
  environment:
    DYNAMODB_GAMES_TABLE: ${self:service}-games-${sls:stage}
    DYNAMODB_PLAYERS_TABLE: ${self:service}-players-${sls:stage}
    LOCK_STORE_TABLE: ${self:service}-distributed-locks-store-${sls:stage}
    DISCORD_APP_ID: ${self:custom.discordSecrets.DISCORD_APP_ID}
    DISCORD_PUBLIC_KEY: ${self:custom.discordSecrets.DISCORD_PUBLIC_KEY}
    DISCORD_BOT_TOKEN: ${self:custom.discordSecrets.DISCORD_BOT_TOKEN}

functions:
  hello:
    handler: handler.hello
  webhook:
    handler: gameUpdates.push
    events:
      - httpApi: 'POST /game-event'
  createCommands:
    handler: handler.createCommands
  discordInteractions:
    handler: index.interactions
    events:
      - httpApi: 'POST /event'
  poll:
    handler: gameUpdates.poll
    timeout: 30
    events:
      - schedule: rate(10 minutes)

resources:
  Resources:
    PlayerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-players-${sls:stage}
        AttributeDefinitions:
          - AttributeName: player_id
            AttributeType: "N"
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: player_id
            KeyType: HASH
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-games-${sls:stage}
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: "N"
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification: 
            AttributeName: ttl
            Enabled: true
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH
    DistributedLocksStore:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: lockId
            AttributeType: "S"
          - AttributeName: lockGroup
            AttributeType: "S"
        KeySchema:
          - AttributeName: lockId
            KeyType: HASH
          - AttributeName: lockGroup
            KeyType: RANGE
        TimeToLiveSpecification: 
            AttributeName: ttl
            Enabled: true
        TableName: ${self:service}-distributed-locks-store-${sls:stage}
        BillingMode: PAY_PER_REQUEST

custom:
  discordSecrets: ${ssm:/aws/reference/secretsmanager/${sls:stage}/choo-choo-bot}
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    keepNames: true
  scripts:
    hooks:
      'deploy:finalize': aws lambda invoke --region us-east-1 --function-name choo-choo-bot-dev-createCommands --invocation-type Event invoke.log

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-plugin-scripts
  - serverless-offline

package:
  individually: true
  excludeDevDependencies: true
